version: 2.1

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack \
            --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "[web]" > .circleci/ansible/inventory.txt
            aws s3 rm s3://udacity-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
         key: migration-dump
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            if(( grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

orbs:
  slack: circleci/slack@4.5.0
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Build back-end
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Build back-end
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - slack/notify:
  #         custom: |
  #           {
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "plain_text",
  #                     "text": "*This is a text notification*",
  #                     "emoji": true
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #         event: always

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          # Adds EC2 Instance
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
      # Appends to inventory
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:c7:90:c9:2c:90:73:a8:b4:25:8c:23:37:3d:2d:8f:a0:a0:d0:c6"]
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Install AWS-CLI
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Install gzip
          command: |
            apk update
            apk add --no-cache --upgrade gzip
      - run:
          name: Install tar
          command: |
            apk add --no-cache tar
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run: 
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
  #     - save_cache:
  #         name: Migration Resources
  #         key: migration-dump
  #         paths:
  #           - ~/project/backend/migrations_dump.txt        
# references this path
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt

      # - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: | #yum because amazon linux
            yum install -y tar
            yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install node
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text )
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # - destroy-environment
      # - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:c7:90:c9:2c:90:73:a8:b4:25:8c:23:37:3d:2d:8f:a0:a0:d0:c6"]
      - run:
          name: Install gzip
          command: |
            apk update
            apk add --no-cache --upgrade gzip
      - run:
          name: Install tar
          command: |
            apk add --no-cache tar
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws-cli
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
      - run:
          name: Install npm
          command: |
            apk add --update npm
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # - destroy-environment
      # - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install curl
          command: |
            apk update
            apk upgrade
            apk --no-cache add curl
            curl --version
      - run:
          name: Install aws-cli
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text )
            echo ${BACKEND_IP}
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$( aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text )
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udacity-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      # - destroy-environment
      # - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar and gzip
          command: |
            yum install -y tar
            yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs

      - run:
          name: Save old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            export OLD_WF_NO=${OldWorkflowID: -7}
            echo "${OLD_WF_NO}" >> ~/OLD_WF_NO.txt
            echo "${OLD_WF_NO}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udacity-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udacity 

      - persist_to_workspace:
          root: ~/
          paths:
            - OLD_WF_NO.txt
      # - destroy-environment
      # - revert-migrations    

  cleanup:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws-cli
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Install curl
          command: |
            apk update
            apk upgrade
            apk --no-cache add curl
            curl --version
      - run:
          name: Install gzip
          command: |
            apk update
            apk add --no-cache --upgrade gzip
      - run:
          name: Install tar
          command: |
            apk add --no-cache tar
      - run:
          name: delete old stacks
          command: |
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names    

            export OLD_WF_NO=$( cat OLD_WF_NO.txt)
            echo "${OLD_WF_NO}"
            export STACKS=$( aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo Stack names: "$STACKS[@]"

            for i in $STACKS[*]
              do
                if [[ $OLD_WF_NO != ${CIRCLE_WORKFLOW_ID:0:7} ]]
                then
                  aws s3 rm "s3://udacity-${OLD_WF_NO}" --recursive
                  aws cloudformation delete-stack --stack-name "udacity-backend-${OLD_WF_NO}"
                  aws cloudformation delete-stack --stack-name "udacity-frontend-${OLD_WF_NO}"
                fi
              done


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - notify:
      #     context: slack-secrets
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-frontend, deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]